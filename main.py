from comet_ml import Experimentimport osfrom tqdm import tqdmfrom run_state import Runfrom torchutils import *print('CUDA available:', torch.cuda.is_available())print('CUDA enabled:', torch.backends.cudnn.enabled)# torch.cuda.empty_cache()HP1 = {"learning_rate": 0.00004               ,"n_epochs": 100               ,"batch_size": 64               ,"num_workers": 5               ,"normalized_data": True               ,"stratified": False               ,"horizontal_flip": False               ,"max_frames": 10               ,"random_seed": 999               ,"flip_prob": 0.5               ,"dataset": "5frame_steps10"               ,"classes": ['apex', 'papillary', 'mitral', '2CH', '3CH', '4CH']               ,"model_type": "3dCNN"               ,"resolution": 100               ,"adaptive_pool": (7, 5, 5)               ,"features": [16,16,"M",16,16,"M",32,32,"M"]               ,"classifier": [0.5, 200, 0.5, 100]                }for hyper_params in [HP1]:    run = Run(disable_experiment = False,          machine = 'server',          hyper_params= hyper_params)    for epoch in tqdm(range(hyper_params["n_epochs"])):        train(epoch, run)        evaluate(epoch, run)print("Exporting confusion matrix")run.log_confusion_matrix()print("Saving model...")torch.save(run.model.state_dict(), os.getcwd() + "/model.pt")