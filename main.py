from comet_ml import Experimentimport osfrom tqdm import tqdmfrom run_state import Runfrom torchutils import *from torchsummary import summaryprint('CUDA available:', torch.cuda.is_available())print('CUDA enabled:', torch.backends.cudnn.enabled)# torch.cuda.empty_cache()# torch.cuda.get_device_capability(0)HP1 = {"learning_rate": 0.001      ,"lr_scheduler": {'step_size': 5, 'gamma': 0.8}      ,"n_epochs": 80      ,"batch_size": 64      ,"num_workers": 5      ,"normalized_data": True      ,"stratified": False      ,"horizontal_flip": False      ,"max_frames": 10      ,"random_seed": 43      ,"flip_prob": 0.5      ,"dataset": "10frame_5steps_100px"      ,"classes": ['apex', 'papillary', 'mitral', '2CH', '3CH', '4CH']      ,"model_type": "3dCNN"      ,"resolution": 100      ,"adaptive_pool": [7,5,5]      ,"features": [16,16,"M",32,32,"M",32,32,"M",64,64,64,"M"]      ,"classifier": [200,0.5,150,0.5,100]                }save_experiment = Falsefor hyper_params in [HP1]:    run = Run(disable_experiment = not save_experiment,          machine = 'pc', # current options are 'server' & 'pc'          hyper_params= hyper_params)    summary(run.model, (1, hyper_params["max_frames"], hyper_params["resolution"], hyper_params["resolution"]))    # for epoch in tqdm(range(hyper_params["n_epochs"])):    #    #     train(epoch, run)    #     evaluate(epoch, run)run.log_confusion_matrices()run.save_model(os.getcwd(), "/model.pt")run.save_run_indexes(os.getcwd(), "/run_indexes.pickle")